version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: lokr-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-lokr}
      POSTGRES_USER: ${POSTGRES_USER:-lokr_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-lokr_password}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d/
    networks:
      - lokr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-lokr_user} -d ${POSTGRES_DB:-lokr}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: lokr-redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - lokr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: lokr-backend
    restart: unless-stopped
    ports:
      - "${API_PORT:-8080}:8080"
    environment:
      - DATABASE_URL=postgres://${POSTGRES_USER:-lokr_user}:${POSTGRES_PASSWORD:-lokr_password}@postgres:5432/${POSTGRES_DB:-lokr}?sslmode=disable
      - REDIS_URL=redis://redis:6379
      - PORT=8080
      - GIN_MODE=${GIN_MODE:-debug}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./storage:/app/storage
      - ./.env:/app/.env
    networks:
      - lokr-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: lokr-frontend
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    environment:
      - VITE_API_URL=http://localhost:8080
      - VITE_GRAPHQL_ENDPOINT=http://localhost:8080/graphql
    depends_on:
      - backend
    networks:
      - lokr-network
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:1.25-alpine
    container_name: lokr-nginx
    restart: unless-stopped
    ports:
      - "${NGINX_PORT:-80}:80"
      - "${NGINX_SSL_PORT:-443}:443"
    volumes:
      - ./deployments/nginx.conf:/etc/nginx/nginx.conf
      - ./deployments/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - lokr-network
    profiles:
      - production

volumes:
  postgres_data:
  redis_data:

networks:
  lokr-network:
    driver: bridge